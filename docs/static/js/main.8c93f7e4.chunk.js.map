{"version":3,"sources":["components/AddCategories.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategories","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","id","title","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","imgs","GifGridItem","className","src","alt","GifGrid","image","key","GifExpertApp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMA0BeA,EAvBO,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACPC,mBAAS,IADF,mBACpCC,EADoC,KACxBC,EADwB,KAY3C,OACE,0BAAMC,SARa,SAACC,GACpBA,EAAEC,iBACoB,KAAtBJ,EAAWK,QACTP,GAAc,SAACQ,GAAD,OAAiBN,GAAjB,mBAAgCM,OAChDL,EAAc,MAKZ,2BAAOM,KAAK,OAAOC,MAAOR,EAAYS,SAXrB,SAACN,GAAD,OAAOF,EAAcE,EAAEO,OAAOF,Y,uBCStCG,EAfF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACC,mCACTC,EAFQ,iDAEwCC,UACpDH,GAHY,6BACC,oCADD,SAKSI,MAAMF,GALf,cAKRG,EALQ,gBAMSA,EAASC,OANlB,uBAMNC,EANM,EAMNA,KACFC,EAAOD,EAAKE,KAAI,kBAA4B,CAChDC,GADoB,EAAGA,GAEvBC,MAFoB,EAAOA,MAG3BT,IAHoB,EAAcU,OAGtBC,iBAAiBX,QAVjB,kBAYPM,GAZO,4CAAH,sDCiBEM,EAdM,SAACd,GAAc,IAAD,EACPb,mBAAS,CACjCoB,KAAM,GACNQ,SAAS,IAHsB,mBAC1BC,EAD0B,KACnBC,EADmB,KAWjC,OANAC,qBAAU,WACRnB,EAAQC,GAAUmB,MAAK,SAACC,GACtBH,EAAS,CAAEV,KAAMa,EAAML,SAAS,SAEjC,CAACf,IAEGgB,GCHMK,EATK,SAAC,GAAoB,IAAlBV,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IAC5B,OACE,yBAAKoB,UAAU,+CACb,yBAAKC,IAAKrB,EAAKsB,IAAKb,IACpB,2BAAIA,KCmBKc,EApBC,SAAC,GAAkB,IAAhBzB,EAAe,EAAfA,SAAe,EACEc,EAAad,GAAjCY,EADkB,EACxBL,KAAcQ,EADU,EACVA,QAEtB,OACE,oCACE,wBAAIO,UAAU,0CAA0CtB,GACvDe,GAAW,yCACZ,yBAAKO,UAAU,aACZV,EAAOH,KAAI,SAACiB,GAAD,OACV,kBAAC,EAAD,eAAaC,IAAKD,EAAMhB,IAAQgB,UCO3BE,EAjBM,WAAO,IAAD,EACWzC,mBAAS,CAAC,gBADrB,mBAClBO,EADkB,KACNR,EADM,KAGzB,OACE,oCACE,4CACA,kBAAC,EAAD,CAAeA,cAAeA,IAC9B,6BACA,4BACGQ,EAAWe,KAAI,SAACT,GAAD,OACd,kBAAC,EAAD,CAAS2B,IAAK3B,EAAUA,SAAUA,U,MCT5C6B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.8c93f7e4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst AddCategories = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleChange = (e) => setInputValue(e.target.value);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    inputValue.trim() !== \"\" &&\n      setCategories((categories) => [inputValue, ...categories]);\n    setInputValue(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleChange} />\n    </form>\n  );\n};\n\nAddCategories.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategories;\n","const getGifs = async (category) => {\n  const apiKey = \"cNSyia1jMQVYcmKIgsWqYb5yt8M5Zif1\";\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=${apiKey}`;\n  const response = await fetch(url);\n  const { data } = await response.json();\n  const gifs = data.map(({ id, title, images }) => ({\n    id,\n    title,\n    url: images.downsized_medium.url,\n  }));\n  return gifs;\n};\n\nexport default getGifs;\n","import { useState, useEffect } from \"react\";\nimport getGifs from \"helpers/getGifs\";\n\nconst useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n      setState({ data: imgs, loading: false });\n    });\n  }, [category]);\n\n  return state;\n};\n\nexport default useFetchGifs;\n","import React from \"react\";\n\nconst GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__backInRight\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n\nexport default GifGridItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport useFetchGifs from \"hooks/useFetchGifs\";\nimport GifGridItem from \"./GifGridItem\";\n\nconst GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className=\" animate__animated animate__zoomInDown\">{category}</h3>\n      {loading && <p>Loading...</p>}\n      <div className=\"card-grid\">\n        {images.map((image) => (\n          <GifGridItem key={image.id} {...image} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nGifGrid.propTypes = {\n  category: PropTypes.string.isRequired,\n};\n\nexport default GifGrid;\n","import React, { useState } from \"react\";\nimport AddCategories from \"components/AddCategories\";\nimport GifGrid from \"components/GifGrid\";\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"Dragon Ball\"]);\n\n  return (\n    <>\n      <h1>GifExpertApp</h1>\n      <AddCategories setCategories={setCategories} />\n      <hr />\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}